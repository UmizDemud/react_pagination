{"version":3,"sources":["components/Pagination/Pagination.tsx","App.tsx","utils.ts","index.tsx"],"names":["Pagination","items","total","perPage","currentPage","onPageChange","pages","i","push","slice","getRandKey","name","num","Math","floor","random","className","cn","disabled","href","onClick","e","prevState","preventDefault","map","_el","length","pageItem","App","from","to","numbers","n","getNumbers","useState","setPerPage","setCurrentPage","id","value","onChange","parseInt","target","htmlFor","ReactDOM","render","document","getElementById"],"mappings":"kNAUaA,EAAa,SAAC,GASzB,IAHY,IALZC,EAKW,EALXA,MACAC,EAIW,EAJXA,MACAC,EAGW,EAHXA,QAGW,IAFXC,mBAEW,MAFG,EAEH,EADXC,EACW,EADXA,aAEMC,EAAQ,GAELC,EAAI,EAAGA,EAAIL,EAAOK,GAAKJ,EAC9BG,EAAME,KAAKP,EAAMQ,MACfF,EACAA,EAAIJ,EAAUD,EAAQK,EAAIJ,EAAUD,IAIxC,IAAMQ,EAAa,SAACC,EAAaC,GAC/B,MAAM,GAAN,OAAUD,EAAV,YAAkBC,EAAlB,YAAyBC,KAAKC,MAAsB,IAAhBD,KAAKE,YAG3C,OACE,qCACE,qBAAIC,UAAU,aAAd,UACE,oBAAIA,UAAWC,IACb,YACA,CAAEC,SAA0B,IAAhBd,IAFd,SAKE,mBACE,UAAQ,WACRY,UAAU,YACVG,KAAK,QACL,gBAA+B,IAAhBf,EACfgB,QAAS,SAACC,GACY,IAAhBjB,EACFC,GAAa,SAAAiB,GAAS,OAAIA,EAAY,KAEtCD,EAAEE,kBATR,oBAgBDjB,EAAMkB,KAAI,SAACC,EAAKlB,GAAN,OACT,oBAEES,UAAS,mBAAcT,IAAMH,EAAc,EAAI,UAAY,IAF7D,SAIE,mBACE,UAAQ,WACRY,UAAU,YACVG,KAAI,WAAMZ,EAAI,GACda,QAAS,SAACC,GACRA,EAAEE,iBACFlB,EAAaE,EAAI,IANrB,SASGA,EAAI,KAZFG,EAAW,WAAYH,OAgBhC,oBAAIS,UAAWC,IACb,YACA,CAAEC,SAAUd,IAAgBE,EAAMoB,SAFpC,SAKE,mBACE,UAAQ,WACRV,UAAU,YACVG,KAAK,QACL,gBAAef,IAAgBE,EAAMoB,OACrCN,QAAS,SAACC,GACJjB,IAAgBE,EAAMoB,OACxBrB,GAAa,SAAAiB,GAAS,OAAIA,EAAY,KAEtCD,EAAEE,kBATR,uBAiBJ,6BACGjB,EAAMF,EAAc,GAAGoB,KAAI,SAACG,EAAUpB,GAAX,OAC1B,oBAAI,UAAQ,OAAZ,SACGoB,GADqBjB,EAAW,OAAQH,aC3F9C,IAAMqB,EAAgB,WAC3B,IACM3B,ECPD,SAAoB4B,EAAcC,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIH,EAAMG,GAAKF,EAAIE,GAAK,EAC/BD,EAAQvB,KAAKwB,GAGf,OAAOD,EDAOE,CAAW,EADX,IAEXT,KAAI,SAAAQ,GAAC,qBAAYA,MACpB,EAA8BE,mBAAS,GAAvC,mBAAO/B,EAAP,KAAgBgC,EAAhB,KACA,EAAsCD,mBAAS,GAA/C,mBAAO9B,EAAP,KAAoBgC,EAApB,KAEA,OACE,sBAAKpB,UAAU,YAAf,UACE,uDAEA,mBAAGA,UAAU,OAAO,UAAQ,OAA5B,SACG,eAAQZ,GAAR,mBACaA,EAAc,GAAKD,EAAU,GAD1C,aAEOC,EAAcD,EAbd,MAawCC,EAAcD,GAF7D,cAXO,GAWP,OAMH,sBAAKa,UAAU,iBAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,yBACE,UAAQ,kBACRqB,GAAG,kBACHrB,UAAU,eACVsB,MAAOnC,EACPoC,SAAU,SAAAlB,GACRc,EAAWK,SAASnB,EAAEoB,OAAOH,MAAO,KACpCF,EAAe,IAPnB,UAUE,wBAAQE,MAAM,IAAd,eACA,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,qBAIJ,uBAAOI,QAAQ,kBAAkB1B,UAAU,qBAA3C,+BAKF,cAAC,EAAD,CACEf,MAAOA,EACPC,MA3CQ,GA4CRC,QAASA,EACTC,YAAaA,EACbC,aAAc+B,QEjDtBO,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.e3f3e466.chunk.js","sourcesContent":["import cn from 'classnames';\n\ntype Props = {\n  items: string[],\n  total: number,\n  perPage: number,\n  currentPage: number,\n  onPageChange: React.Dispatch<React.SetStateAction<number>>,\n};\n\nexport const Pagination = ({\n  items,\n  total,\n  perPage,\n  currentPage = 1,\n  onPageChange,\n}: Props) => {\n  const pages = [];\n\n  for (let i = 0; i < total; i += perPage) {\n    pages.push(items.slice(\n      i,\n      i + perPage < total ? i + perPage : total,\n    ));\n  }\n\n  const getRandKey = (name:string, num: number) => {\n    return `${name}_${num}_${Math.floor(Math.random() * 100)}`;\n  };\n\n  return (\n    <>\n      <ul className=\"pagination\">\n        <li className={cn(\n          'page-item',\n          { disabled: currentPage === 1 },\n        )}\n        >\n          <a\n            data-cy=\"prevLink\"\n            className=\"page-link\"\n            href=\"#prev\"\n            aria-disabled={currentPage === 1}\n            onClick={(e) => {\n              if (currentPage !== 1) {\n                onPageChange(prevState => prevState - 1);\n              } else {\n                e.preventDefault();\n              }\n            }}\n          >\n            «\n          </a>\n        </li>\n        {pages.map((_el, i) => (\n          <li\n            key={getRandKey('pageLink', i)}\n            className={`page-item${i === currentPage - 1 ? ' active' : ''}`}\n          >\n            <a\n              data-cy=\"pageLink\"\n              className=\"page-link\"\n              href={`#${i + 1}`}\n              onClick={(e) => {\n                e.preventDefault();\n                onPageChange(i + 1);\n              }}\n            >\n              {i + 1}\n            </a>\n          </li>\n        ))}\n        <li className={cn(\n          'page-item',\n          { disabled: currentPage === pages.length },\n        )}\n        >\n          <a\n            data-cy=\"nextLink\"\n            className=\"page-link\"\n            href=\"#next\"\n            aria-disabled={currentPage === pages.length}\n            onClick={(e) => {\n              if (currentPage !== pages.length) {\n                onPageChange(prevState => prevState + 1);\n              } else {\n                e.preventDefault();\n              }\n            }}\n          >\n            »\n          </a>\n        </li>\n      </ul>\n      <ul>\n        {pages[currentPage - 1].map((pageItem, i) => (\n          <li data-cy=\"item\" key={getRandKey('item', i)}>\n            {pageItem}\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { Pagination } from './components/Pagination';\nimport { getNumbers } from './utils';\n\nexport const App: React.FC = () => {\n  const total = 42;\n  const items = getNumbers(1, total)\n    .map(n => `Item ${n}`);\n  const [perPage, setPerPage] = useState(5);\n  const [currentPage, setCurrentPage] = useState(1);\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${currentPage}`\n        + ` (items ${(currentPage - 1) * perPage + 1}`\n        + ` - ${currentPage * perPage > total ? total : currentPage * perPage}`\n        + ` of ${total})`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            value={perPage}\n            onChange={e => {\n              setPerPage(parseInt(e.target.value, 10));\n              setCurrentPage(1);\n            }}\n          >\n            <option value=\"3\">3</option>\n            <option value=\"5\">5</option>\n            <option value=\"10\">10</option>\n            <option value=\"20\">20</option>\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n\n      <Pagination\n        items={items}\n        total={total}\n        perPage={perPage}\n        currentPage={currentPage}\n        onPageChange={setCurrentPage}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}